#pragma once
#include "head.h"

namespace api_emu {
	extern void return_back(uc_engine* uc, int params_num, sim_process* context);
	extern bool api_simulation_router(uc_engine* uc, std::string name, std::string moudle_name, uint64_t function_address, uint64_t call_address, uint64_t code_size, sim_process* context);
	extern void HeapAlloc(ULONG AllocBytes, bool IsPageAlign);
	extern void LocalAlloc(uc_engine* uc, uint64_t address, sim_process* context);
	extern void exit(uc_engine* uc, uint64_t address, sim_process* context);
	extern void GetSystemTimeAsFileTime(uc_engine* uc, uint64_t address, sim_process* context);
	extern void GetCurrentThreadId(uc_engine* uc, uint64_t address, sim_process* context);
	extern void GetCurrentProcessId(uc_engine* uc, uint64_t address, sim_process* context);
	extern void FakeLoadLibraryA(uc_engine* uc, uint64_t address, sim_process* context);
	extern void GetModuleHandleA(uc_engine* uc, uint64_t address, sim_process* context);
	extern void GetModuleHandleW(uc_engine* uc, uint64_t address, sim_process* context);
	extern void FakeQueryPerformanceCounter(uc_engine* uc, uint64_t address, sim_process* context);
	extern void FakeIsProcessorFeaturePresent(uc_engine* uc, uint64_t address, sim_process* context);
	extern ULONG64 StackAlloc(uc_engine* uc, ULONG AllocBytes);
	extern void StackFree(uc_engine* uc, ULONG AllocBytes);
	extern void FakeSystem(uc_engine* uc, uint64_t address, sim_process* context);
	extern void FakeCxxFrameHandler(uc_engine* uc, uint64_t address, sim_process* context);
	extern void FakeCxxThrowException(uc_engine* uc, uint64_t address, sim_process* context);
	extern void Fake__stdio_common_vfprintf(uc_engine* uc, uint64_t address, sim_process* context);
	extern void FakeGetProcAddress(uc_engine* uc, uint64_t address, sim_process* context);
	extern void FakeSetErrorMode(uc_engine* uc, uint64_t address, sim_process* context);
};