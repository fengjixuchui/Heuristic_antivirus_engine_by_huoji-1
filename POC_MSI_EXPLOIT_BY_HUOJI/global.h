#pragma once
#include "head.h"
#include "pe_action.h"
class globalvar
{
public:
	csh hanlde_capstone;
	uc_engine* uc_engine;
	uc_hook hook_code;
	uc_hook hook_mem;
	uc_hook hook_mem_unmap;
	uc_hook hook_mem_write;
	uc_hook hook_sys_call;
	HANDLE handle_deamon_thread;
	bool is_running;
	std::vector<sim_process> process; //虚拟的进程列表
	std::unordered_map<uint64_t, std::string> syscall_tables;
};
namespace tools {

	//https://github.com/hzqst/unicorn_pe/blob/f43f6a44e91c3d427c2dd16de6972a1da1bbf6e2/unicorn_pe/emuapi.cpp#L29
	static bool uc_read_char(uc_engine* uc, uint64_t address, std::string& str)
	{
		char c;
		uc_err err;
		size_t len = 0;
		while (1)
		{
			err = uc_mem_read(uc, address + len, &c, sizeof(char));
			if (err != UC_ERR_OK)
				return false;
			if (c != '\0')
				str.push_back(c);
			else
				break;

			len += sizeof(char);

			if (len > 1024 * sizeof(char))
				break;
		}

		return true;
	}
	static bool uc_read_wchar(uc_engine* uc, uint64_t address, std::wstring& str)
	{
		wchar_t c;
		uc_err err;
		size_t len = 0;
		while (true)
		{
			err = uc_mem_read(uc, address + len, &c, sizeof(wchar_t));
			if (err != UC_ERR_OK)
				return false;
			if (c != '\0') {
				str.push_back(c);
			}
			else
				break;

			len += sizeof(wchar_t);

			if (len > 1024 * sizeof(wchar_t))
				break;
		}

		return true;
	}
	static void ANSIToUnicode(const std::string& str, std::wstring& out)
	{
		int len = MultiByteToWideChar(CP_ACP, 0, str.c_str(), (int)str.length(), NULL, 0);
		out.resize(len);
		MultiByteToWideChar(CP_ACP, 0, str.c_str(), (int)str.length(), (LPWSTR)out.data(), len);
	}

	static void UnicodeToANSI(const std::wstring& str, std::string& out)
	{
		int len = WideCharToMultiByte(CP_ACP, 0, str.c_str(), (int)str.length(), NULL, 0, NULL, NULL);
		out.resize(len);
		WideCharToMultiByte(CP_ACP, 0, str.c_str(), (int)str.length(), (LPSTR)out.data(), len, NULL, NULL);
	}

	static void UnicodeToUTF8(const std::wstring& str, std::string& out)
	{
		int len = WideCharToMultiByte(CP_UTF8, 0, str.c_str(), (int)str.length(), NULL, 0, NULL, NULL);
		out.resize(len);
		WideCharToMultiByte(CP_UTF8, 0, str.c_str(), (int)str.length(), (LPSTR)out.data(), len, NULL, NULL);
	}

	static void UTF8ToUnicode(const std::string& str, std::wstring& out)
	{
		int len = MultiByteToWideChar(CP_UTF8, 0, str.c_str(), (int)str.length(), NULL, 0);
		out.resize(len);
		MultiByteToWideChar(CP_UTF8, 0, str.c_str(), (int)str.length(), (LPWSTR)out.data(), len);
	}
};
extern globalvar* g_global;
extern pe_action* g_pe;
extern virtual_helper* g_virtual;
extern ssdt_manager* g_ssdt;
